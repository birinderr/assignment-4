// studentcourseschema.js
const mongoose = require('mongoose');

// Define Course Schema
const courseSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: String
});
const Course = mongoose.model('Course', courseSchema);

// Define Student Schema
const studentSchema = new mongoose.Schema({
    name: { type: String, required: true },
    age: { type: Number, required: true },
    grade: { type: String, required: true },
    courses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Course' }]
});
const Student = mongoose.model('Student', studentSchema);

module.exports = { Student, Course };

// main application file (e.g., server.js)
const express = require('express');
const app = express();
const PORT = 8080;
const mongoose = require('mongoose');
const { Student } = require('./studentcourseschema');

app.use(express.json());

// 1. Add a new student
app.post('/students', async (req, res) => {
    try {
        const { name, age, grade, courses = [] } = req.body;

        const student = new Student({ name, age, grade, courses });
        await student.save();

        res.status(201).json({
            message: 'Student added successfully!',
            student
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'An error occurred while adding the student', error: err.message });
    }
});

// 2. Retrieve all students with populated course details
app.get('/students', async (req, res) => {
    try {
        let studentData = await Student.find().populate('courses');
        res.status(200).json({ data: studentData });
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: 'An error occurred while fetching students', error: error.message });
    }
});

// 3. Retrieve a single student by ID with populated course details
app.get('/students/:id', async (req, res) => {
    try {
        let studentData = await Student.findById(req.params.id).populate('courses');
        if (!studentData) {
            return res.status(404).json({ message: 'Student does not exist' });
        }
        res.status(200).json({ data: studentData });
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: 'An error occurred while fetching the student', error: error.message });
    }
});

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/university', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB!'))
.catch(err => console.log('MongoDB connection error:', err));

// Start server
app.listen(PORT, () => {
    console.log(Listening on PORT: ${PORT});
});